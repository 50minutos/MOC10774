USE DB

EXEC sp_tables

SELECT * 
FROM CIDADE --ORDEM FÍSICA

--HEAP - SEM ORDEM
--CLUSTERED INDEX - NA ORDEM DO ÍNDICE
--INDEX - NA ORDEM DO MENOR ÍNDICE

CREATE TABLE PESSOA
(
	COD_PESSOA INT IDENTITY, 
	NOME_PESSOA VARCHAR(50), 
	SEXO_PESSOA CHAR(1)
)

INSERT PESSOA 
VALUES ('ADAO', 'M'), 
	('EVA', 'F'), 
	('CAIM', 'M'), 
	('ABEL', 'M')

EXEC SP_HELPINDEX PESSOA

SELECT * 
FROM SYS.indexes 
WHERE object_id = OBJECT_ID('PESSOA')

ALTER TABLE PESSOA
ADD PRIMARY KEY (COD_PESSOA)

SELECT * 
FROM SYS.indexes 
WHERE object_id = OBJECT_ID('PESSOA')

SELECT * 
FROM PESSOA

ALTER TABLE PESSOA
ADD UNIQUE (NOME_PESSOA)

SELECT * 
FROM SYS.indexes 
WHERE object_id = OBJECT_ID('PESSOA')

SELECT * 
FROM PESSOA --COD_PESSOA

SELECT COD_PESSOA, 
	NOME_PESSOA
FROM PESSOA --NOME_PESSOA

SELECT * 
FROM PESSOA
ORDER BY COD_PESSOA

SELECT * 
FROM PESSOA
ORDER BY COD_PESSOA DESC

SELECT * 
FROM PESSOA
ORDER BY 1 DESC



SELECT *
FROM PESSOA 
--WHERE COD_PESSOA = 1

SELECT *
FROM PESSOA 
--WHERE COD_PESSOA = 1
ORDER BY SEXO_PESSOA DESC,	
	NOME_PESSOA /*ASC*/

SELECT *
FROM PESSOA 
WHERE SEXO_PESSOA <> 'M'

SELECT *
FROM CIDADE 
WHERE SIGLA_ESTADO = 'RJ'

SELECT *
FROM CIDADE 
WHERE SIGLA_ESTADO <> 'RJ'
	OR SIGLA_ESTADO IS NULL

ALTER TABLE CIDADE 
ADD POPULACAO_CIDADE INT

SELECT *
FROM CIDADE

UPDATE CIDADE 
SET POPULACAO_CIDADE = 10000
WHERE COD_CIDADE = 1

UPDATE CIDADE 
SET POPULACAO_CIDADE = 500
WHERE COD_CIDADE = 2

UPDATE CIDADE 
SET POPULACAO_CIDADE = 12
WHERE COD_CIDADE = 3

UPDATE CIDADE 
SET POPULACAO_CIDADE = 100
WHERE COD_CIDADE = 4

UPDATE CIDADE 
SET POPULACAO_CIDADE = 10
WHERE COD_CIDADE = 5

UPDATE CIDADE 
SET POPULACAO_CIDADE = 23
WHERE COD_CIDADE = 6

UPDATE CIDADE 
SET POPULACAO_CIDADE = CASE COD_CIDADE 
	WHEN 1 THEN 10000
	WHEN 2 THEN 500
	WHEN 3 THEN 12
	WHEN 4 THEN 100
	WHEN 5 THEN 10
	WHEN 6 THEN 23
END

SELECT * 
FROM CIDADE

SELECT *
FROM CIDADE 
WHERE POPULACAO_CIDADE >= 100 
	AND POPULACAO_CIDADE <= 500
--OU
SELECT *
FROM CIDADE 
WHERE POPULACAO_CIDADE BETWEEN 100 AND 500

SELECT *
FROM CIDADE 
WHERE POPULACAO_CIDADE < 100 
	OR POPULACAO_CIDADE > 500
--OU
SELECT *
FROM CIDADE 
WHERE POPULACAO_CIDADE NOT BETWEEN 100 AND 500

SELECT *
FROM CIDADE
WHERE COD_CIDADE IN (1, 2, 5, 999)
--OU
SELECT *
FROM CIDADE
WHERE COD_CIDADE = 1
	OR COD_CIDADE = 2
	OR COD_CIDADE = 5
	OR COD_CIDADE = 999

SELECT *
FROM CIDADE
WHERE COD_CIDADE NOT IN (1, 2, 5, 999)
--OU
SELECT *
FROM CIDADE
WHERE COD_CIDADE <> 1
	AND COD_CIDADE <> 2
	AND COD_CIDADE <> 5
	AND COD_CIDADE <> 999

SELECT *
FROM CIDADE
WHERE NOME_CIDADE = 'BERZONTE'

SELECT *
FROM CIDADE
WHERE NOME_CIDADE LIKE 'SÃO%'

SELECT *
FROM CIDADE
WHERE NOME_CIDADE LIKE 'S_O%'

SELECT *
FROM CIDADE
WHERE NOME_CIDADE LIKE '[AEIOU]%'

SELECT *
FROM CIDADE
WHERE NOME_CIDADE NOT LIKE '[AEIOU]%'

SELECT *
FROM CIDADE
WHERE NOME_CIDADE LIKE '[A-J]%'

SELECT *
FROM CIDADE
WHERE CEP_CIDADE LIKE '[0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9]'

DECLARE @X TABLE (CAMPO INT)

INSERT @x
VALUES (1), 
	(2), 
	(3), 
	(4), 
	(5) 

UPDATE @X
SET CAMPO = CAMPO * CAMPO

SELECT ROW_NUMBER() OVER (ORDER BY CAMPO DESC) AS 'LINHA', 
	* 
FROM @x
ORDER BY CAMPO ASC

SELECT POWER(4, 2), 
	POWER(8, 2) 

SELECT *
FROM CIDADE
WHERE NOME_CIDADE LIKE '%A%A%'

SELECT *
FROM CIDADE
WHERE NOME_CIDADE COLLATE LATIN1_GENERAL_CI_AI LIKE 'SAO%'

SELECT TOP 1 * 
FROM CIDADE 
ORDER BY POPULACAO_CIDADE DESC

DECLARE @POPULACAO_CIDADE INT 

SELECT TOP 1 @POPULACAO_CIDADE = POPULACAO_CIDADE
FROM CIDADE 
ORDER BY POPULACAO_CIDADE DESC

SELECT @POPULACAO_CIDADE

SELECT TOP 1 * 
FROM CIDADE 
ORDER BY POPULACAO_CIDADE DESC

SELECT TOP 17 PERCENT * 
FROM CIDADE 
ORDER BY POPULACAO_CIDADE DESC

UPDATE CIDADE 
SET POPULACAO_CIDADE = 500 
WHERE COD_CIDADE = 4

SELECT * 
FROM CIDADE

SELECT TOP 2 WITH TIES *
FROM CIDADE
ORDER BY POPULACAO_CIDADE DESC

--SELECT TOP 200, INVERTER, SELECT TOP 10, INVERTER

--TABELA TEMPORÁRIA

--CTE -> COMMON TABLE EXPRESSION

--OFFSET -> "SALTA" X REGISTROS
--FETCH -> "RETORNA" X REGISTROS
--SELECT ... OFFSET 190 FETCH 10

USE AdventureWorks2012

-------------------------------------------
--SEM PAGINAÇÃO
-------------------------------------------

SELECT * 
FROM PERSON.PERSON 
ORDER BY BUSINESSENTITYID

-------------------------------------------
--PRIMEIRA PÁGINA
-------------------------------------------

DECLARE @CURRENT_OFFSET INT = 0
DECLARE @OFFSET_INCREMENT INT = 10

SELECT * 
FROM PERSON.PERSON 
ORDER BY BUSINESSENTITYID
OFFSET @CURRENT_OFFSET ROWS
FETCH NEXT @OFFSET_INCREMENT ROWS ONLY

-------------------------------------------
--PRÓXIMA PÁGINA
-------------------------------------------

SET @CURRENT_OFFSET += @OFFSET_INCREMENT

SELECT * 
FROM PERSON.PERSON 
ORDER BY BUSINESSENTITYID
OFFSET @CURRENT_OFFSET ROWS
FETCH NEXT @OFFSET_INCREMENT ROWS ONLY

-------------------------------------------
--PAGINAÇÃO TRADICIONAL USANDO SP
-------------------------------------------

GO

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE NAME = 'GETPAGEDPRODUCTS_TRADITIONAL')
	DROP PROC PRODUCTION.GETPAGEDPRODUCTS_TRADITIONAL

GO

CREATE PROC PRODUCTION.GETPAGEDPRODUCTS_TRADITIONAL
	@PAGENUMBER INT,
	@NUMBEROFROWSPERPAGE INT
AS
	WITH ORDEREDROWS AS
	( 
		SELECT 
			ROW_NUMBER() OVER(ORDER BY PRODUCTID) AS ROWNUMBER,
			PRODUCTID,
			NAME,
			SIZE,
			COLOR 
		FROM PRODUCTION.PRODUCT 
	)
	SELECT 
		PRODUCTID, 
		NAME, 
		SIZE, 
		COLOR 
	FROM ORDEREDROWS
	WHERE ROWNUMBER BETWEEN (((@PAGENUMBER - 1) * @NUMBEROFROWSPERPAGE) + 1)
		AND (@PAGENUMBER * @NUMBEROFROWSPERPAGE)
	ORDER BY PRODUCTID
GO

-------------------------------------------
--PAGINAÇÃO USANDO SP COM OFFSET E FETCH
-------------------------------------------

IF EXISTS (SELECT * FROM SYS.OBJECTS WHERE NAME = 'GETPAGEDPRODUCTS_NEW')
	DROP PROC PRODUCTION.GETPAGEDPRODUCTS_NEW

GO

CREATE PROC PRODUCTION.GETPAGEDPRODUCTS_NEW
	@PAGENUMBER INT,
	@NUMBEROFROWSPERPAGE INT
AS
	SELECT PRODUCTID, 
		NAME, 
		SIZE, 
		COLOR 
	FROM PRODUCTION.PRODUCT 
	ORDER BY PRODUCTID
	OFFSET ((@PAGENUMBER - 1) * @NUMBEROFROWSPERPAGE) ROWS
	FETCH NEXT @NUMBEROFROWSPERPAGE ROWS ONLY
GO

EXEC PRODUCTION.GETPAGEDPRODUCTS_TRADITIONAL 3, 12 --81%
EXEC PRODUCTION.GETPAGEDPRODUCTS_NEW 3, 12 --19%

USE DB

SELECT * 
FROM CIDADE
WHERE SIGLA_ESTADO <> NULL --UNKNOWN

DROP TABLE PESSOA

CREATE TABLE PESSOA
(
	COD_PESSOA INT IDENTITY NOT NULL, 
	NOME_PESSOA VARCHAR(50) NULL, 
	SEXO_PESSOA CHAR(1) CHECK (SEXO_PESSOA IN ('M', 'F')) NOT NULL
)

SELECT DISTINCT SIGLA_ESTADO 
FROM CIDADE
