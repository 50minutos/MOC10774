USE DB

EXEC sp_MSforeachtable 'DROP TABLE ?'
EXEC sp_MSforeachtable 'DROP TABLE ?'

CREATE TABLE TIPO_PRODUTO 
(
	COD_TIPO_PRODUTO INT IDENTITY PRIMARY KEY, 
	NOME_TIPO_PRODUTO VARCHAR(50) UNIQUE
)

CREATE TABLE PRODUTO
(
	COD_PRODUTO INT IDENTITY PRIMARY KEY, 
	NOME_PRODUTO VARCHAR(50), 
	PRECO_PRODUTO DEC(9,2), 
	COD_TIPO_PRODUTO INT REFERENCES TIPO_PRODUTO
)

INSERT TIPO_PRODUTO 
VALUES ('MATERIAL DE ESCRITÓRIO'), 
	('FERRAMENTA')
	
INSERT PRODUTO 
VALUES ('CADERNO 10 MAT 200 FLS', 10, 1), 
	('GRAMPEADOR 26/6', 20, 1), 
	('RÉGUA 30 CM COM 30 UN', 30, 1), 
	('MARRETA', 40, 2), 
	('MARTELO', 50, 2), 
	('SERROTE', 60, 2), 
	('SARGENTO', 70, 2)

SELECT COD_PRODUTO, 
	NOME_PRODUTO, 
	COD_TIPO_PRODUTO, 
	MIN(PRECO_PRODUTO), 
	MAX(PRECO_PRODUTO), 
	COUNT(*)
FROM PRODUTO
GROUP BY COD_PRODUTO, 
	NOME_PRODUTO, 
	COD_TIPO_PRODUTO

SELECT COD_TIPO_PRODUTO, 
	MIN(PRECO_PRODUTO), 
	MAX(PRECO_PRODUTO), 
	COUNT(*)
FROM PRODUTO
GROUP BY COD_TIPO_PRODUTO

SELECT *, COD_TIPO_PRODUTO, 
	MIN(PRECO_PRODUTO) OVER(PARTITION BY COD_TIPO_PRODUTO),
	MIN(PRECO_PRODUTO) OVER(),
	MAX(PRECO_PRODUTO) OVER(PARTITION BY COD_TIPO_PRODUTO),
	MAX(PRECO_PRODUTO) OVER(),
	COUNT(*) OVER(PARTITION BY COD_TIPO_PRODUTO), 
	COUNT(*) OVER()
FROM PRODUTO

SELECT *, 
	SUM(PRECO_PRODUTO) OVER(ORDER BY COD_PRODUTO ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM PRODUTO

SELECT *, 
	SUM(PRECO_PRODUTO) OVER(ORDER BY COD_PRODUTO ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING)
FROM PRODUTO
ORDER BY COD_PRODUTO

SELECT *, 
	ROW_NUMBER() OVER (ORDER BY COD_PRODUTO)
FROM PRODUTO

SELECT *, 
	ROW_NUMBER() OVER (ORDER BY COD_PRODUTO DESC)
FROM PRODUTO

SELECT *, 
	ROW_NUMBER() OVER (PARTITION BY COD_TIPO_PRODUTO ORDER BY COD_PRODUTO)
FROM PRODUTO

SELECT * 
FROM (
	SELECT *, 
		ROW_NUMBER() OVER (PARTITION BY COD_TIPO_PRODUTO ORDER BY PRECO_PRODUTO DESC) AS 'LINHA'
	FROM PRODUTO
) X
WHERE LINHA = 1

;WITH X 
AS
(
	SELECT *, 
		ROW_NUMBER() OVER (PARTITION BY COD_TIPO_PRODUTO ORDER BY PRECO_PRODUTO DESC) AS 'LINHA'
	FROM PRODUTO
)
SELECT *
FROM X
WHERE LINHA = 1

UPDATE PRODUTO
SET PRECO_PRODUTO = 30
WHERE COD_PRODUTO IN (4, 5)

SELECT *, 
	RANK() OVER (ORDER BY PRECO_PRODUTO) AS 'RANK'
FROM PRODUTO

SELECT *, 
	DENSE_RANK() OVER (ORDER BY PRECO_PRODUTO) AS 'RANK'
FROM PRODUTO

SELECT *, 
	RANK() OVER (PARTITION BY COD_TIPO_PRODUTO ORDER BY PRECO_PRODUTO) AS 'RANK'
FROM PRODUTO

SELECT *, 
	DENSE_RANK() OVER (PARTITION BY COD_TIPO_PRODUTO ORDER BY PRECO_PRODUTO) AS 'RANK'
FROM PRODUTO

INSERT PRODUTO
SELECT NOME_PRODUTO, 
	PRECO_PRODUTO * 2, 
	COD_TIPO_PRODUTO
FROM PRODUTO

SELECT *
FROM PRODUTO

;WITH X 
AS ( 
	SELECT *, 
		NTILE(20) OVER (ORDER BY PRECO_PRODUTO DESC) AS 'FATIA'
	FROM PRODUTO
)
SELECT * 
FROM X
WHERE FATIA = 1

DROP TABLE PRODUTO

CREATE TABLE PRODUTO
(
	COD_PRODUTO INT IDENTITY PRIMARY KEY, 
	NOME_PRODUTO VARCHAR(50), 
	PRECO_PRODUTO DEC(9,2), 
	COD_TIPO_PRODUTO INT REFERENCES TIPO_PRODUTO
)
	
INSERT PRODUTO 
VALUES ('CADERNO 10 MAT 200 FLS', 10, 1), 
	('GRAMPEADOR 26/6', 20, 1), 
	('RÉGUA 30 CM COM 30 UN', 30, 1), 
	('MARRETA', 40, 2), 
	('MARTELO', 50, 2), 
	('SERROTE', 60, 2), 
	('SARGENTO', 70, 2)

SELECT 1.0/7

SELECT *, 
	CUME_DIST() OVER (ORDER BY PRECO_PRODUTO DESC) AS 'FATIA'
FROM PRODUTO

SELECT 1.0/6

SELECT *, 
	PERCENT_RANK() OVER (ORDER BY PRECO_PRODUTO DESC) AS 'FATIA'
FROM PRODUTO

SELECT *, 
	PERCENTILE_CONT(0) WITHIN GROUP (ORDER BY PRECO_PRODUTO DESC) OVER (),
	PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY PRECO_PRODUTO DESC) OVER (),
	PERCENTILE_CONT(1) WITHIN GROUP (ORDER BY PRECO_PRODUTO DESC) OVER ()
FROM PRODUTO

SELECT *, 
	PERCENTILE_DISC(0) WITHIN GROUP (ORDER BY PRECO_PRODUTO DESC) OVER (),
	PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY PRECO_PRODUTO DESC) OVER (),
	PERCENTILE_DISC(1) WITHIN GROUP (ORDER BY PRECO_PRODUTO DESC) OVER ()
FROM PRODUTO

USE ADVENTUREWORKS2012

-----------------------------------
--OVER
-----------------------------------

SELECT TOP 100 ROW_NUMBER() OVER(PARTITION BY POSTALCODE ORDER BY POSTALCODE) AS 'ROW NUMBER', 
    P.LASTNAME, 
	A.POSTALCODE
FROM PERSON.PERSON AS P 
    INNER JOIN PERSON.ADDRESS AS A 
		ON A.ADDRESSID = P.BUSINESSENTITYID
ORDER BY POSTALCODE

-----------------------------------
--OVER COM AGREGAÇÃO
-----------------------------------

SELECT SALESORDERID, 
	PRODUCTID, 
	ORDERQTY,
    SUM(ORDERQTY) OVER(PARTITION BY SALESORDERID) AS 'TOTAL',
    AVG(ORDERQTY) OVER(PARTITION BY SALESORDERID) AS 'AVG',
    COUNT(ORDERQTY) OVER(PARTITION BY SALESORDERID) AS 'COUNT',
    MIN(ORDERQTY) OVER(PARTITION BY SALESORDERID) AS 'MIN',
    MAX(ORDERQTY) OVER(PARTITION BY SALESORDERID) AS 'MAX'
FROM SALES.SALESORDERDETAIL 
WHERE SALESORDERID IN (43659, 43664)

-----------------------------------
--OVER COM TOTALIZAÇÃO
-----------------------------------

SELECT BUSINESSENTITYID, 
	TERRITORYID, 
	DATEPART(YY, MODIFIEDDATE) AS SALESYEAR,
	CONVERT(VARCHAR(20), SALESYTD, 1) AS SALESYTD,
	CONVERT(VARCHAR(20), AVG(SALESYTD) 
		OVER (PARTITION BY TERRITORYID ORDER BY DATEPART(YY, MODIFIEDDATE)), 1) AS MOVINGAVG,
	CONVERT(VARCHAR(20), SUM(SALESYTD) 
		OVER (PARTITION BY TERRITORYID ORDER BY DATEPART(YY,MODIFIEDDATE)), 1) AS CUMULATIVETOTAL
FROM SALES.SALESPERSON
WHERE TERRITORYID IS NULL 
		OR TERRITORYID < 5
ORDER BY TERRITORYID, 
	SALESYEAR

-----------------------------------
--OVER COM LAG
-----------------------------------

SELECT BUSINESSENTITYID, 
	YEAR(QUOTADATE) AS SALESYEAR, 
	QUOTADATE,
    LAG(SALESQUOTA, 1, 0) 
		OVER (ORDER BY YEAR(QUOTADATE)) AS PREVIOUSQUOTA,
	SALESQUOTA AS CURRENTQUOTA
FROM SALES.SALESPERSONQUOTAHISTORY
WHERE BUSINESSENTITYID = 275 
		AND YEAR(QUOTADATE) IN ('2005', '2006')

-----------------------------------
--OVER COM LEAD
-----------------------------------

SELECT TERRITORYNAME, 
	BUSINESSENTITYID, 
	SALESYTD, 
	LEAD (SALESYTD, 1, 0) 
		OVER (PARTITION BY TERRITORYNAME ORDER BY SALESYTD DESC) AS NEXTREPSALES
FROM SALES.VSALESPERSON
WHERE TERRITORYNAME IN (N'NORTHWEST', N'CANADA') 
ORDER BY TERRITORYNAME

-----------------------------------
--OVER COM PRECEDING
-----------------------------------

SELECT CUSTOMERID, 
        ORDERDATE, 
        SALESORDERNUMBER,
        FIRST_VALUE(ORDERDATE) 
			OVER (PARTITION BY CUSTOMERID ORDER BY ORDERDATE ROWS UNBOUNDED PRECEDING) AS FIRSTORDER
FROM SALES.SALESORDERHEADER
ORDER BY CUSTOMERID, 
	ORDERDATE, 
	SALESORDERNUMBER

